AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'CodePipeline Template'

Parameters:

  Application:
    Description: 'Name of the application for billing'
    Type: 'String'
  
  Environment:
    Description: 'Name of the deployment environment'
    Type: 'String'
    
  DomainName:
    Description: 'The base domain name for the application website'
    Type: 'String'
    
  GitHubOwner:
    Description: 'The GitHub repository owner for this application'
    Type: 'String'
  
  GitHubRepo:
    Description: 'The GitHub repository name for this application'
    Type: 'String'
  
  GitHubSourceVersion:
    Default: 'initializing'
    Description: 'The source version to use for container tags'
    Type: 'String'
  
  WebDistributionCertificate:
    Description: 'The web distribution certificate (must be in us-east-1)'
    Type: 'String'
  
  AlertEmail:
    Description: 'Email to which administrative alerts are sent'
    Type: 'String'
  
  AlertPhone:
    Description: 'Phone number to which administrative alerts are sent via SMS'
    Type: 'String'
  
  EcsX86Ami:
    Description: 'x86_64 ECS Optimized AMI'
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'
  
  EcsArmAmi:
    Description: 'aarch64 ECS Optimized AMI'
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/arm64/recommended/image_id'
  
  CloudFrontHostedZone:
    Default: 'Z2FDTNDATAQYW2'
    Description: 'Global Hosted Zone for the CloudFront Service'
    Type: 'String'
  
Conditions:
  
  IsNotInitializing: !Not
    - !Equals
      - !Sub '${GitHubSourceVersion}'
      - 'initializing'

Globals:
  
  Function:
    MemorySize: 1792
    Timeout: 30
    Tags:
      Application: !Sub '${Application}'
      Environment: !Sub '${Environment}'
    Environment:
      Variables:
        APPLICATION: !Sub '${Application}'
        ENVIRONMENT: !Sub '${Environment}'
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        
Resources:

  # ECS Environment

  EcsCluster:
    Type: 'AWS::ECS::Cluster'
    Condition: 'IsNotInitializing'
    Properties:
      ClusterName: !Sub '${Application}-${Environment}'
      ClusterSettings: 
        - Name: 'containerInsights'
          Value: 'enabled'
      Tags: 
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: 'ecs-cluster'

  EcsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/${Application}/${Environment}/ecs'
      RetentionInDays: 14

  EcsTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-ecs-task-execution'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ecs-tasks.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'ecs-task-execution'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action: 
                  - 'ssm:GetParameters'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Application}/${Environment}/*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub '${EcsLogGroup.Arn}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'ecs-task-execution-role'

  EcsRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Sub '${Application}-${Environment}'
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: 
                - !Sub '${EcsTaskExecutionRole.Arn}'
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
          - Effect: 'Allow'
            Principal:
              AWS: !Sub '${ContainerBuildRole.Arn}'
            Action:
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:DescribeImages'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:UploadLayerPart'
      LifecyclePolicy:
        LifecyclePolicyText: |-
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 1,
                  "tagStatus": "untagged"
                },
                "description": "Expire Untagged Images",
                "rulePriority": 1
              }
            ]
          }
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'ecs-respository'

  EcsInstanceRole:
    Type: 'AWS::IAM::Role'
    Condition: 'IsNotInitializing'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-ecs-instance'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ec2.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'ecs-instance-role'

  EcsInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Condition: 'IsNotInitializing'
    Properties:
      InstanceProfileName: !Sub '${Application}-${Environment}-ecs-instance'
      Roles:
        - !Sub '${EcsInstanceRole}'

  # Api

  ApiCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    Condition: 'IsNotInitializing'
    Properties:
      DomainName: !Sub '${DomainName}'
      ValidationMethod: 'DNS'
      SubjectAlternativeNames:
        - !Sub '*.${DomainName}'
      DomainValidationOptions:
        - DomainName: !Sub '${DomainName}'
          HostedZoneId: !Sub '${HostedZone}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: 'api-certificate'
  
  ApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Condition: 'IsNotInitializing'
    DependsOn:
      - 'ApiapiStage'
    Properties:
      UsagePlanName: !Sub '${Application}-${Environment}'
      Description: !Sub 'Usage Plan for ${Application}-${Environment}'
      ApiStages:
        - ApiId: !Sub '${Api}'
          Stage: 'api'
          #Throttle:
      #Quota:
      #Throttle:

  ApiDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Condition: 'IsNotInitializing'
    Properties:
      DomainName: !Sub '${DomainName}'
      RegionalCertificateArn: !Sub '${ApiCertificate}'
      EndpointConfiguration:
        Types:
          - 'REGIONAL'
  
  ApiDomainMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: 'IsNotInitializing'
    Properties:
      DomainName: !Sub '${ApiDomain}'
      RestApiId: !Sub '${Api}'
  
  Api:
    Type: 'AWS::Serverless::Api'
    Condition: 'IsNotInitializing'
    Properties:
      EndpointConfiguration: 'REGIONAL'
      StageName: 'api'
      Tags:
        Application: !Sub '${Application}'
        Environment: !Sub '${Environment}'
        Resource: !Sub 'api'
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Sub '${Application}-${Environment}'
        securityDefinitions:
          api_key:
            type: 'apiKey'
            name: 'x-api-key'
            in: 'header'
        definitions:
          Empty:
            type: 'object'
            title: 'Empty Schema'
        paths:
          '/example-container/{message}':
            get:
              consumes:
                - 'application/json'
              produces:
                - 'application/json'
              # security:
              #   - api_key: []
              x-amazon-apigateway-integration:
                type: 'aws_proxy'
                httpMethod: 'POST'
                responses: { }
                uri:
                  !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExampleContainerFunction.Arn}/invocations'
            # options:
            #   consumes:
            #     - 'application/json'
            #   produces:
            #     - 'application/json'
            #   responses:
            #     '200':
            #       description: '200 response'
            #       schema:
            #         $ref: '#/definitions/Empty'
            #       headers:
            #         Access-Control-Allow-Origin:
            #           type: 'string'
            #         Access-Control-Allow-Methods:
            #           type: 'string'
            #         Access-Control-Allow-Headers:
            #           type: 'string'
            #   x-amazon-apigateway-integration:
            #     type: 'mock'
            #     passthroughBehavior: 'when_no_match'
            #     requestTemplates:
            #       application/json: "{\"statusCode\": 200}"
            #     responses:
            #       default:
            #         statusCode: '200'
            #         responseParameters:
            #           method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            #           method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            #           method.response.header.Access-Control-Allow-Origin: "'*'"

  ExampleContainerFunction:
    Type: 'AWS::Serverless::Function'
    Condition: 'IsNotInitializing'
    DependsOn:
      - 'MountTargetA'
      - 'MountTargetB'
      - 'MountTargetC'
    Properties:
      FunctionName: !Sub '${Application}-${Environment}-get-standard-tile'
      PackageType: 'Image'
      ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${EcsRepository}:example-${GitHubSourceVersion}-x86_64'
      ImageConfig:
        Command: [ 'lambda_entry.hello_world' ]
        EntryPoint: [ '/usr/local/bin/python', '-m', 'awslambdaric' ]
        WorkingDirectory: '/opt'
      Events:
        ApiExampleResource:
          Type: 'Api'
          Properties:
            Path: '/example-container/{message}'
            Method: 'GET'
            RestApiId: !Ref 'Api'
      Tags:
        Resource: 'container-example-function'
      Policies:
        - 'AWSLambdaBasicExecutionRole'

  ExampleContainerFunctionLogs:
    Type: 'AWS::Logs::LogGroup'
    Condition: 'IsNotInitializing'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ExampleContainerFunction}'
      RetentionInDays: 14
      
  # Route53
      
  HostedZone:
    Type: 'AWS::Route53::HostedZone'
    Condition: 'IsNotInitializing'
    Properties:
      Name: !Sub '${DomainName}'
      HostedZoneConfig:
        Comment: !Sub '${Application}-${Environment}'
      HostedZoneTags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: 'hosted-zone'
  
  # Analytics
  
  AnalyticsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Application}-${Environment}-${AWS::AccountId}-${AWS::Region}-analytics'
      AccessControl: 'LogDeliveryWrite'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: 'analytics-bucket'
  
  AnalyticsWorkgroup:
    Type: 'AWS::Athena::WorkGroup'
    Condition: 'IsNotInitializing'
    Properties:
      Name: !Sub '${Application}-${Environment}-analytics'
      State: 'ENABLED'
      WorkGroupConfiguration:
        # BytesScannedCutoffPerQuery:
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: true
        RequesterPaysEnabled: false
        ResultConfiguration:
          # EncryptionConfiguration:
          OutputLocation: !Sub 's3://${AnalyticsBucket}/athena-query-results/'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: 'web-analytics-workgroup'

  AnalyticsDatabase:
    Type: 'AWS::Glue::Database'
    Condition: 'IsNotInitializing'
    Properties:
      CatalogId: !Sub '${AWS::AccountId}'
      DatabaseInput:
        Name: !Sub '${Application}_${Environment}_analytics'
        Description: !Sub 'Analytics Tables for ${Application}-${Environment}'
  
  WebAnalyticsCloudFrontTable:
    Type: 'AWS::Glue::Table'
    Condition: 'IsNotInitializing'
    Properties:
      CatalogId: !Sub '${AWS::AccountId}'
      DatabaseName: !Sub '${AnalyticsDatabase}'
      TableInput:
        Name: 'cloudfront_raw'
        Description: !Sub 'Raw CloudFront Requests Table for ${Application}-${Environment}'
        Owner: 'hadoop'
        Retention: 0
        TableType: 'EXTERNAL_TABLE'
        Parameters:
          classification: 'csv'
          compressionType: 'gzip'
          EXTERNAL: 'TRUE'
          typeOfData: 'file'
          'skip.header.line.count': '2'
        StorageDescriptor:
          Location: !Sub 's3://${AnalyticsBucket}/web-distribution'
          Compressed: true
          StoredAsSubDirectories: false
          InputFormat: 'org.apache.hadoop.mapred.TextInputFormat'
          OutputFormat: 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          SerdeInfo:
            SerializationLibrary: 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
            Parameters:
              'serialization.format': "\t"
              'field.delim': "\t"
          Columns:
            - Name: 'date'
              Type: 'date'
            - Name: 'time'
              Type: 'string'
            - Name: 'location'
              Type: 'string'
            - Name: 'bytes'
              Type: 'bigint'
            - Name: 'requestip'
              Type: 'string'
            - Name: 'method'
              Type: 'string'
            - Name: 'host'
              Type: 'string'
            - Name: 'uri'
              Type: 'string'
            - Name: 'status'
              Type: 'bigint'
            - Name: 'referrer'
              Type: 'string'
            - Name: 'useragent'
              Type: 'string'
            - Name: 'querystring'
              Type: 'string'
            - Name: 'cookie'
              Type: 'string'
            - Name: 'resulttype'
              Type: 'string'
            - Name: 'requestid'
              Type: 'string'
            - Name: 'hostheader'
              Type: 'string'
            - Name: 'requestprotocol'
              Type: 'string'
            - Name: 'requestbytes'
              Type: 'bigint'
            - Name: 'timetaken'
              Type: 'double'
            - Name: 'xforwardedfor'
              Type: 'string'
            - Name: 'sslprotocol'
              Type: 'string'
            - Name: 'sslcipher'
              Type: 'string'
            - Name: 'responseresulttype'
              Type: 'string'
            - Name: 'httpversion'
              Type: 'string'
            - Name: 'filestatus'
              Type: 'string'
            - Name: 'encryptedfields'
              Type: 'bigint'
            - Name: 'port'
              Type: 'bigint'
            - Name: 'time_to_first_byte'
              Type: 'double'
            - Name: 'detailed_result_type'
              Type: 'string'
            - Name: 'content_length'
              Type: 'bigint'
            - Name: 'range_start'
              Type: 'bigint'
            - Name: 'range_end'
              Type: 'bigint'
  
  # Web Distribution
          
  WebDistributionBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Application}-${Environment}-${AWS::AccountId}-${AWS::Region}-web'
      LoggingConfiguration:
        DestinationBucketName: !Sub '${AnalyticsBucket}'
        LogFilePrefix: 'web-distribution-bucket/'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: 'web-distribution-bucket'
  
  WebDistributionBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: 'IsNotInitializing'
    Properties:
      Bucket: !Sub '${WebDistributionBucket}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              CanonicalUser: !Sub '${WebDistributionIdentity.S3CanonicalUserId}'
            Action:
              's3:GetObject'
            Resource:
              - !Sub '${WebDistributionBucket.Arn}/*'
  
  WebDistributionIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Condition: 'IsNotInitializing'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub '${Application}-${Environment}'
  
  WebDistributionRecordSets:
    Type: 'AWS::Route53::RecordSetGroup'
    Condition: 'IsNotInitializing'
    Properties:
      Comment: !Sub '${Application}-${Environment}-cloudfront'
      HostedZoneId: !Sub '${HostedZone}'
      RecordSets:
        - Name: !Sub '${DomainName}.'
          Type: 'A'
          AliasTarget:
            DNSName: !Sub '${WebDistribution.DomainName}'
            HostedZoneId: !Sub '${CloudFrontHostedZone}'
            EvaluateTargetHealth: false
        - Name: !Sub '${DomainName}.'
          Type: 'AAAA'
          AliasTarget:
            DNSName: !Sub '${WebDistribution.DomainName}'
            HostedZoneId: !Sub '${CloudFrontHostedZone}'
            EvaluateTargetHealth: false
    
  WebDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Condition: 'IsNotInitializing'
    Properties:
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: 'web-distribution'
      DistributionConfig:
        Comment: !Sub '${Application}-${Environment}'
        Enabled: true
        Aliases:
          - !Sub '${DomainName}'
        # CustomErrorResponses
        DefaultRootObject: 'index.html'
        HttpVersion: 'http2'
        IPV6Enabled: true
        PriceClass: 'PriceClass_All'
        Logging:
          Bucket: !Sub '${AnalyticsBucket.DomainName}'
          Prefix: 'web-distribution/'
        Origins:
          - Id: 'WebDistributionBucket'
            DomainName: !Sub '${WebDistributionBucket.RegionalDomainName}'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${WebDistributionIdentity}'
          - Id: 'Api'
            DomainName: !Sub '${ApiDomain.RegionalDomainName}'
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
              OriginSSLProtocols:
                - 'TLSv1.2'
        CacheBehaviors:
          - TargetOriginId: 'Api'
            PathPattern: 'api/*'
            AllowedMethods:
              - 'DELETE'
              - 'GET'
              - 'HEAD'
              - 'OPTIONS'
              - 'PATCH'
              - 'POST'
              - 'PUT'
            CachedMethods:
              - 'GET'
              - 'HEAD'
              - 'OPTIONS'
            Compress: true
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ViewerProtocolPolicy: 'https-only'
            ForwardedValues:
              QueryString: true
              Headers:
                - '*'
        DefaultCacheBehavior:
          TargetOriginId: 'WebDistributionBucket'
          Compress: true
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
          ViewerProtocolPolicy: 'redirect-to-https'
          ForwardedValues:
            QueryString: false
        ViewerCertificate:
          AcmCertificateArn: !Sub '${WebDistributionCertificate}'
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'

  # EFS
  
  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Condition: 'IsNotInitializing'
    Properties:
      PerformanceMode: 'generalPurpose'
      ThroughputMode: 'bursting'
      LifecyclePolicies:
        - TransitionToIA: 'AFTER_7_DAYS'
      FileSystemPolicy: 
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: !Sub '*'
            Action: 
              - 'elasticfilesystem:Client*'
      FileSystemTags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'filesystem'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'

  EfsAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Condition: 'IsNotInitializing'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      PosixUser:
        Gid: '0'
        Uid: '0'
      AccessPointTags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'efs-access-point'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'

  MountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Condition: 'IsNotInitializing'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetA}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  MountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Condition: 'IsNotInitializing'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetB}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  MountTargetC:
    Type: 'AWS::EFS::MountTarget'
    Condition: 'IsNotInitializing'
    Properties:
      FileSystemId: !Sub '${FileSystem}'
      SubnetId: !Sub '${SubnetC}'
      SecurityGroups:
        - !Sub '${Vpc.DefaultSecurityGroup}'
      
  # VPC

  Vpc:
    Type: 'AWS::EC2::VPC'
    Condition: 'IsNotInitializing'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'vpc'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Condition: 'IsNotInitializing'
    Properties:
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'igw'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Condition: 'IsNotInitializing'
    Properties:
      InternetGatewayId: !Sub '${InternetGateway}'
      VpcId: !Sub '${Vpc}'

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Condition: 'IsNotInitializing'
    Properties:
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'rtb'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}'
  
  InternetRoute:
    Type: 'AWS::EC2::Route'
    Condition: 'IsNotInitializing'
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Sub '${InternetGateway}'
      RouteTableId: !Sub '${RouteTable}'
  
  S3Route:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: 'IsNotInitializing'
    Properties:
      RouteTableIds:
        - !Sub '${RouteTable}'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Sub '${Vpc}'
  
  SubnetA:
    Type: 'AWS::EC2::Subnet'
    Condition: 'IsNotInitializing'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 0
          - Fn::GetAZs: ''
      CidrBlock: '10.0.0.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'subnet-a'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-a'
  
  SubnetRouteA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: 'IsNotInitializing'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetA}'
  
  SubnetB:
    Type: 'AWS::EC2::Subnet'
    Condition: 'IsNotInitializing'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      CidrBlock: '10.0.32.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'subnet-b'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-b'
  
  SubnetRouteB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: 'IsNotInitializing'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetB}'
  
  SubnetC:
    Type: 'AWS::EC2::Subnet'
    Condition: 'IsNotInitializing'
    Properties: 
      AvailabilityZone: 
        Fn::Select:
          - 2
          - Fn::GetAZs: ''
      CidrBlock: '10.0.64.0/19'
      MapPublicIpOnLaunch: true
      VpcId: !Sub '${Vpc}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'subnet-c'
        - Key: 'Name'
          Value: !Sub '${Application}-${Environment}-c'
  
  SubnetRouteC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Condition: 'IsNotInitializing'
    Properties:
      RouteTableId: !Sub '${RouteTable}'
      SubnetId: !Sub '${SubnetC}'
  
  # Build Pipeline
  
  BuildBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Application}-${Environment}-${AWS::AccountId}-${AWS::Region}-build'
      # LifecycleConfiguration:
      #   Rules:
      #     - Id: 'daily-cleanup'
      #       Status: 'Enabled'
      #       AbortIncompleteMultipartUpload:
      #         DaysAfterInitiation: 1
      #       ExpirationInDays: 1
      #       NoncurrentVersionExpirationInDays: 1
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-bucket'

  CloudFormationBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-codebuild-cloudformation'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'codebuild.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'cloudformation-build'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'cloudformation:DescribeStacks'
                Resource:
                  - !Sub '${AWS::StackId}'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Application}-${Environment}-cloudformation*'
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub '${BuildBucket.Arn}/*'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'cloudformation-build-role'
  
  CloudFormationBuildLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${CloudFormationBuildProject}'
      
  CloudFormationBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${Application}-${Environment}-cloudformation'
      TimeoutInMinutes: 15
      Artifacts:
        Type: 'CODEPIPELINE'
      Cache:
        Type: 'NO_CACHE'
      ServiceRole: !Sub '${CloudFormationBuildRole.Arn}'
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: 'build/buildspec_cfn.yml'
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        Type: 'LINUX_CONTAINER'
        EnvironmentVariables:
          - Name: 'APPLICATION'
            Value: !Sub '${Application}'
          - Name: 'ENVIRONMENT'
            Value: !Sub '${Environment}'
          - Name: 'DOMAIN_NAME'
            Value: !Sub '${DomainName}'
          - Name: 'GITHUB_OWNER'
            Value: !Sub '${GitHubOwner}'
          - Name: 'GITHUB_REPO'
            Value: !Sub '${GitHubRepo}'
          - Name: 'WEB_DISTRIBUTION_CERTIFICATE'
            Value: !Sub '${WebDistributionCertificate}'
          - Name: 'ALERT_EMAIL'
            Value: !Sub '${AlertEmail}'
          - Name: 'ALERT_PHONE'
            Value: !Sub '${AlertPhone}'
          - Name: 'BUILD_BUCKET'
            Value: !Sub '${BuildBucket}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'cloudformation-build-project'

  CloudFormationDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-cloudformation-deploy'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'cloudformation.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'cloudformation-deploy-role'
  
  BatchBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-codebuild-batch'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'codebuild.${AWS::URLSuffix}'
      ManagedPolicyArns: # TODO: Reduce Permissions
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
      # Policies:
      #   - PolicyName: 'cloudformation-build'
      #     PolicyDocument:
      #       Version: '2012-10-17'
      #       Statement:
      #         - Effect: 'Allow'
      #           Action:
      #             - 'logs:CreateLogStream'
      #             - 'logs:PutLogEvents'
      #           Resource:
      #             - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Application}-${Environment}-cloudformation*'
      #         - Effect: 'Allow'
      #           Action:
      #             - 's3:GetObject'
      #             - 's3:PutObject'
      #           Resource:
      #             - !Sub '${BuildBucket.Arn}/*'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'batch-build-role'
  
  ContainerBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-codebuild-container'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'codebuild.${AWS::URLSuffix}'
      ManagedPolicyArns: # TODO: Reduce Permissions
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
      # Policies:
      #   - PolicyName: 'cloudformation-build'
      #     PolicyDocument:
      #       Version: '2012-10-17'
      #       Statement:
      #         - Effect: 'Allow'
      #           Action:
      #             - 'logs:CreateLogStream'
      #             - 'logs:PutLogEvents'
      #           Resource:
      #             - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Application}-${Environment}-cloudformation*'
      #         - Effect: 'Allow'
      #           Action:
      #             - 's3:GetObject'
      #             - 's3:PutObject'
      #           Resource:
      #             - !Sub '${BuildBucket.Arn}/*'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'container-build-role'
  
  ContainerBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${Application}-${Environment}-container'
      TimeoutInMinutes: 120
      Artifacts:
        Type: 'CODEPIPELINE'
      BuildBatchConfig:
        CombineArtifacts: false
        Restrictions:
          ComputeTypesAllowed:
            - 'BUILD_GENERAL1_LARGE'
          MaximumBuildsAllowed: 2
        ServiceRole: !Sub '${BatchBuildRole.Arn}'
        TimeoutInMins: 120
      Cache:
        Type: 'NO_CACHE'
      ServiceRole: !Sub '${ContainerBuildRole.Arn}'
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: 'build/buildspec_batch.yml'
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        Type: 'LINUX_CONTAINER'
        EnvironmentVariables:
          - Name: 'APPLICATION'
            Value: !Sub '${Application}'
          - Name: 'ENVIRONMENT'
            Value: !Sub '${Environment}'
          - Name: 'CONTAINER_REPO'
            Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${EcsRepository}'
          - Name: 'DOCKER_HUB_USER'
            Value: '{{resolve:ssm:/CodePipeline/dockerhub-user:1}}'
          - Name: 'DOCKER_HUB_PASSWORD'
            Value: '{{resolve:ssm:/CodePipeline/dockerhub-password:1}}'
          - Name: 'DOCKER_CLI_EXPERIMENTAL'
            Value: 'enabled'
          - Name: 'BUILD_BUCKET'
            Value: !Sub '${BuildBucket}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'container-build-project'

  BuildPipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Application}-${Environment}-codepipeline'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'codepipeline.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'codepipeline'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'cloudformation:*'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action:
                  - 'codebuild:*Build*'
                Resource:
                  - !Sub '${CloudFormationBuildProject.Arn}'
                  - !Sub '${ContainerBuildProject.Arn}'
              - Effect: 'Allow'
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !Sub '${CloudFormationDeployRole.Arn}'
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject*'
                  - 's3:GetReplicationConfiguration'
                  - 's3:ListBucket'
                  - 's3:PutObject*'
                  - 's3:Replicate*'
                Resource:
                  - !Sub '${BuildBucket.Arn}'
                  - !Sub '${BuildBucket.Arn}/*'
                  - !Sub '${WebDistributionBucket.Arn}'
                  - !Sub '${WebDistributionBucket.Arn}/*'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-pipeline-role'
  
  BuildPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub '${Application}-${Environment}'
      ArtifactStores:
        - Region: !Sub '${AWS::Region}'
          ArtifactStore:
            Location: !Sub '${BuildBucket}'
            Type: 'S3'
      RestartExecutionOnUpdate: true
      RoleArn: !Sub '${BuildPipelineRole.Arn}'
      Stages:
        - Name: 'Source'
          Actions:
            - Name: 'SourceAction'
              OutputArtifacts:
                - Name: 'SourceArtifact'
              ActionTypeId: 
                Category: 'Source'
                Owner: 'ThirdParty'
                Provider: 'GitHub'
                Version: '1'
              Configuration:
                Owner: !Sub '${GitHubOwner}'
                Repo: !Sub '${GitHubRepo}'
                Branch: !Sub '${Environment}'
                OAuthToken: '{{resolve:ssm:/CodePipeline/GitHub:1}}'
                PollForSourceChanges: false
        - Name: 'Build'
          Actions:
            - Name: 'CloudFormationBuildAction'
              InputArtifacts:
                - Name: 'SourceArtifact'
              OutputArtifacts:
                - Name: 'CloudFormationArtifact'
                - Name: 'WebArtifact'
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                ProjectName: !Sub '${CloudFormationBuildProject}'
                PrimarySource: 'SourceArtifact'
            - Name: 'ContainerBuildAction'
              InputArtifacts:
                - Name: 'SourceArtifact'
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                BatchEnabled: true
                ProjectName: !Sub '${ContainerBuildProject}'
                PrimarySource: 'SourceArtifact'
        - Name: 'CloudFormationDeploy'
          Actions:
            - Name: 'CloudFormationDeployAction'
              InputArtifacts:
                - Name: 'CloudFormationArtifact'
              ActionTypeId:
                Category: 'Deploy'
                Owner: 'AWS'
                Provider: 'CloudFormation'
                Version: '1'
              Configuration:
                ActionMode: 'CREATE_UPDATE'
                StackName: !Sub '${Application}-${Environment}'
                Capabilities: 'CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND'
                RoleArn: !Sub '${CloudFormationDeployRole.Arn}'
                TemplatePath: 'CloudFormationArtifact::build/cfn_main_packaged.yml'
                TemplateConfiguration: 'CloudFormationArtifact::build/cfn_configuration.json'
        - Name: 'StaticWebContentDeploy'
          Actions:
            - Name: 'StaticWebContentDeployAction'
              InputArtifacts: 
                - Name: 'WebArtifact'
              ActionTypeId: 
                Category: 'Deploy'
                Owner: 'AWS'
                Provider: 'S3'
                Version: '1'
              Configuration:
                BucketName: !Sub '${WebDistributionBucket}'
                Extract: 'true'
                # CannedACL: 'public-read'
                CacheControl: 'no-cache, no-store, must-revalidate'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-pipeline'
  
  BuildPipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: 'GITHUB_HMAC'
      AuthenticationConfiguration:
        SecretToken: '{{resolve:ssm:/CodePipeline/GitHub:1}}'
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: !Sub 'refs/heads/${Environment}'
      RegisterWithThirdParty: true
      TargetAction: 'SourceAction'
      TargetPipeline: !Sub '${BuildPipeline}'
      TargetPipelineVersion: !Sub '${BuildPipeline.Version}'
