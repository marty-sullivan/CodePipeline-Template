AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: ''

Parameters:

  Application:
    Description: 'Name of the application for billing'
    Type: 'String'
  
  Environment:
    Description: 'Name of the deployment environment'
    Type: 'String'
    
  DomainName:
    Description: 'The base domain name for the application website'
    Type: 'String'
    
  GitHubOwner:
    Description: 'The GitHub repository owner for this application'
    Type: 'String'
  
  GitHubRepo:
    Description: 'The GitHub repository name for this application'
    Type: 'String'
  
  AlertEmail:
    Description: 'Email to which administrative alerts are sent'
    Type: 'String'
  
  AlertPhone:
    Description: 'Phone number to which administrative alerts are sent via SMS'
    Type: 'String'
    
Outputs:

  EcsRepository:
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${EcsRepository}'
    
Resources:

  # ECS Environment
  
  EcsTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: !Sub 'ecs-tasks.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'ecs-task-execution'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource:
                  - '*'
              - Effect: 'Allow'
                Action: 
                  - 'ssm:GetParameters'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Application}/${Environment}/*'
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub '${EcsLogGroup.Arn}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'ecs-task-execution-role'

  EcsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      LogGroupName: !Sub '/${Application}/${Environment}/ecs'
      RetentionInDays: 14

  EcsRepository:
    Type: 'AWS::ECR::Repository'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      RepositoryName: !Sub '${Application}-${Environment}'
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: 
                - !Sub '${EcsTaskExecutionRole.Arn}'
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
          - Effect: 'Allow'
            Principal:
              AWS: !Sub '${BatchBuildRole.Arn}'
            Action:
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:DescribeImages'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:UploadLayerPart'
      LifecyclePolicy:
        LifecyclePolicyText: |-
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 1,
                  "tagStatus": "untagged"
                },
                "description": "Expire Untagged Images",
                "rulePriority": 1
              }
            ]
          }
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'ecs-respository'

  # Build
  
  BuildBucket:
    Type: 'AWS::S3::Bucket'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      BucketName: !Sub '${Application}-${Environment}-build-${AWS::AccountId}-${AWS::Region}'
      # LifecycleConfiguration:
      #   Rules:
      #     - Id: 'daily-cleanup'
      #       Status: 'Enabled'
      #       AbortIncompleteMultipartUpload:
      #         DaysAfterInitiation: 1
      #       ExpirationInDays: 1
      #       NoncurrentVersionExpirationInDays: 1
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-bucket'

  CloudFormationBuildRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'codebuild.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'cloudformation-build'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Application}-${Environment}-cloudformation*'
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub '${BuildBucket.Arn}/*'
              - Effect: 'Allow'
                Action:
                  - 'apigateway:*'
                # TODO: Reduce Permissions
                Resource:
                  - '*'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'cloudformation-build-role'
  
  CloudFormationBuildLogs:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${CloudFormationBuildProject}'
      
  CloudFormationBuildProject:
    Type: 'AWS::CodeBuild::Project'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      Name: !Sub '${Application}-${Environment}-cloudformation'
      TimeoutInMinutes: 15
      Artifacts:
        Type: 'CODEPIPELINE'
      Cache:
        Type: 'NO_CACHE'
      ServiceRole: !Sub '${CloudFormationBuildRole.Arn}'
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: 'build/buildspec_cfn.yml'
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        Type: 'LINUX_CONTAINER'
        EnvironmentVariables:
          - Name: 'APPLICATION'
            Value: !Sub '${Application}'
          - Name: 'ENVIRONMENT'
            Value: !Sub '${Environment}'
          - Name: 'BUILD_BUCKET'
            Value: !Sub '${BuildBucket}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'cloudformation-build-project'

  CloudFormationDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'cloudformation.${AWS::URLSuffix}'
      # ManagedPolicyArns:
      #   - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
      Policies:
        - PolicyName: 'cloudformation-deploy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'codebuild:*'
                  - 'codepipeline:*'
                  - 'iam:*'
                  - 'lambda:*'
                  - 'logs:*'
                  - 's3:*Bucket*'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${Application}-${Environment}*'
                  - !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Application}-${Environment}*'
                  - !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:webhook:*'
                  - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:instance-profile/${Application}-${Environment}*'
                  - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Application}-${Environment}*'
                  - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Application}-${Environment}*'
                  - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*${Application}*${Environment}*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${Application}-${Environment}*'
              - Effect: 'Allow'
                Action:
                  - 'cloudformation:*'
                Resource:
                  - !Sub '${AWS::StackId}'
                  - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/*'
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${Application}-${Environment}-build-${AWS::AccountId}-${AWS::Region}/*'
              - Effect: 'Allow'
                Action:
                  - 'ssm:GetParameter*'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/CodePipeline/GitHub'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Application}/${Environment}/*'
              - Effect: 'Allow'
                Action:
                  - 'logs:DescribeLogGroups'
                Resource:
                  - '*'
              # TODO: Reduce Permissions here
              - Effect: 'Allow'
                Action:
                  - 'ec2:*'
                  - 'ecs:*'
                  - 'ecr:*'
                  - 'elasticfilesystem:*'
                  - 'iam:RemoveRoleFromInstanceProfile'
                Resource:
                  - '*'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'cloudformation-deploy-role'
  
  BatchBuildRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'codebuild.${AWS::URLSuffix}'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
      # Policies:
      #   - PolicyName: 'cloudformation-build'
      #     PolicyDocument:
      #       Version: '2012-10-17'
      #       Statement:
      #         - Effect: 'Allow'
      #           Action:
      #             - 'logs:CreateLogStream'
      #             - 'logs:PutLogEvents'
      #           Resource:
      #             - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${Application}-${Environment}-cloudformation*'
      #         - Effect: 'Allow'
      #           Action:
      #             - 's3:GetObject'
      #             - 's3:PutObject'
      #           Resource:
      #             - !Sub '${BuildBucket.Arn}/*'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'cloudformation-build-role'
  
  ContainerBuildProject:
    Type: 'AWS::CodeBuild::Project'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      Name: !Sub '${Application}-${Environment}-container'
      TimeoutInMinutes: 60
      Artifacts:
        Type: 'CODEPIPELINE'
      BuildBatchConfig:
        CombineArtifacts: false
        Restrictions:
          ComputeTypesAllowed:
            - 'BUILD_GENERAL1_LARGE'
          MaximumBuildsAllowed: 2
        ServiceRole: !Sub '${BatchBuildRole.Arn}'
        TimeoutInMins: 60
      Cache:
        Type: 'NO_CACHE'
      ServiceRole: !Sub '${BatchBuildRole.Arn}'
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: 'build/buildspec_batch.yml'
      Environment:
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        Type: 'LINUX_CONTAINER'
        EnvironmentVariables:
          - Name: 'APPLICATION'
            Value: !Sub '${Application}'
          - Name: 'ENVIRONMENT'
            Value: !Sub '${Environment}'
          - Name: 'BUILD_BUCKET'
            Value: !Sub '${BuildBucket}'
          - Name: 'DOCKER_CLI_EXPERIMENTAL'
            Value: 'enabled'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'container-build-project'

  BuildPipelineRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 'sts:AssumeRole'
            Principal:
              Service: 
                - !Sub 'codepipeline.${AWS::URLSuffix}'
      Policies:
        - PolicyName: 'codepipeline'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'cloudformation:*'
                Resource:
                  - !Sub '${AWS::StackId}'
              - Effect: 'Allow'
                Action:
                  - 'codebuild:*Build*'
                Resource:
                  - !Sub '${CloudFormationBuildProject.Arn}'
                  - !Sub '${ContainerBuildProject.Arn}'
              - Effect: 'Allow'
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !Sub '${CloudFormationDeployRole.Arn}'
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub '${BuildBucket.Arn}/*'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-pipeline-role'
  
  BuildPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      ArtifactStore:
        Location: !Sub '${BuildBucket}'
        Type: 'S3'
      RestartExecutionOnUpdate: true
      RoleArn: !Sub '${BuildPipelineRole.Arn}'
      Stages:
        - Name: 'Source'
          Actions:
            - Name: 'SourceAction'
              OutputArtifacts:
                - Name: 'SourceArtifact'
              ActionTypeId: 
                Category: 'Source'
                Owner: 'ThirdParty'
                Provider: 'GitHub'
                Version: '1'
              Configuration:
                Owner: !Sub '${GitHubOwner}'
                Repo: !Sub '${GitHubRepo}'
                Branch: !Sub '${Environment}'
                OAuthToken: '{{resolve:ssm:/CodePipeline/GitHub:1}}'
                PollForSourceChanges: false
        - Name: 'CloudFormationBuild'
          Actions:
            - Name: 'CloudFormationBuildAction'
              InputArtifacts:
                - Name: 'SourceArtifact'
              OutputArtifacts:
                - Name: 'CloudFormationArtifact'
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                ProjectName: !Sub '${CloudFormationBuildProject}'
                PrimarySource: 'SourceArtifact'
        - Name: 'ContainerBuild'
          Actions:
            - Name: 'ContainerBuildAction'
              InputArtifacts:
                - Name: 'SourceArtifact'
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                BatchEnabled: true
                ProjectName: !Sub '${ContainerBuildProject}'
                PrimarySource: 'SourceArtifact'
        - Name: 'CloudFormationDeploy'
          Actions:
            - Name: 'CloudFormationDeployAction'
              InputArtifacts:
                - Name: 'CloudFormationArtifact'
              ActionTypeId:
                Category: 'Deploy'
                Owner: 'AWS'
                Provider: 'CloudFormation'
                Version: '1'
              Configuration:
                ActionMode: 'CREATE_UPDATE'
                StackName: !Sub '${Application}-${Environment}'
                Capabilities: 'CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND'
                RoleArn: !Sub '${CloudFormationDeployRole.Arn}'
                TemplatePath: 'CloudFormationArtifact::build/packaged.yml'
                ParameterOverrides: !Sub |-
                  {
                    "Application": "${Application}",
                    "Environment": "${Environment}",
                    "DomainName": "${DomainName}",
                    "GitHubOwner": "${GitHubOwner}",
                    "GitHubRepo": "${GitHubRepo}",
                    "AlertEmail": "${AlertEmail}",
                    "AlertPhone": "${AlertPhone}"
                  }
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub 'build-pipeline'
  
  BuildPipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    DependsOn:
      - 'CloudFormationDeployRole'
    Properties:
      Authentication: 'GITHUB_HMAC'
      AuthenticationConfiguration:
        SecretToken: '{{resolve:ssm:/CodePipeline/GitHub:1}}'
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: !Sub 'refs/heads/${Environment}'
      RegisterWithThirdParty: true
      TargetAction: 'SourceAction'
      TargetPipeline: !Sub '${BuildPipeline}'
      TargetPipelineVersion: !Sub '${BuildPipeline.Version}'
