AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Standard Web Template'

Parameters:
  
  Application:
    Description: 'Name of the application for billing'
    Type: 'String'
    
  Environment:
    Description: 'Name of the deployment environment'
    Type: 'String'
  
  DomainName:
    Description: 'The base domain name for the website'
    Type: 'String'
  
  CloudFrontHostedZone:
    Default: 'Z2FDTNDATAQYW2'
    Description: 'The Hosted Zone for the Global CloudFront service'
    Type: 'String'

  CloudFormationDeployRole:
    Description: 'The IAM Role used by CloudFormation to deploy this stack'
    Type: 'String'

Outputs:

  ApiId:
    Value: !Sub '${Api}'

  WebBucket:
    Value: !Sub '${WebBucket}'

Globals:
  
  Function:
    Handler: 'index.lambda_handler'
    MemorySize: 128
    Runtime: 'python3.8'
    Timeout: 30
    Tags:
      Application: !Sub '${Application}'
      Environment: !Sub '${Environment}'
    Environment:
      Variables:
        APPLICATION: !Sub '${Application}'
        ENVIRONMENT: !Sub '${Environment}'
        AWS_ACCOUNT_ID: !Sub '${AWS::AccountId}'
        
Resources:

  DeployPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${Application}-${Environment}-web-deploy-policy'
      Roles:
        - !Sub '${CloudFormationDeployRole}'
      PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'acm:*'
                - 'apigateway:*'
                - 'athena:*'
                - 'cloudfront:*'
                - 'glue:*'
                - 'route53:*'
              Resource:
                - '*'

  # Api

  Api:
    Type: 'AWS::Serverless::Api'
    DependsOn:
      - 'DeployPolicy'
    Properties:
      EndpointConfiguration: 'REGIONAL'
      StageName: 'api'
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Sub '${Application}-${Environment}'
        securityDefinitions:
          api_key:
            type: 'apiKey'
            name: 'x-api-key'
            in: 'header'
        paths:
          '/example':
            get:
              # security:
              #   - api_key: []
              x-amazon-apigateway-integration:
                type: 'aws_proxy'
                httpMethod: 'POST'
                responses: { }
                uri:
                  !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExampleFunction.Arn}/invocations'

  ApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn: 
      - 'ApiapiStage'
    Properties:
      UsagePlanName: !Sub '${Application}-${Environment}'
      Description: !Sub 'Usage Plan for ${Application}-${Environment}'
      ApiStages:
        - ApiId: !Sub '${Api}'
          Stage: 'api'
          #Throttle:
      #Quota:
      #Throttle:

  ApiDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      DomainName: !Sub '${DomainName}'
      RegionalCertificateArn: !Sub '${WebDistributionCertificate}'
      EndpointConfiguration:
        Types:
          - 'REGIONAL'
  
  ApiDomainMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      DomainName: !Sub '${ApiDomain}'
      RestApiId: !Sub '${Api}'
  
  # Functions
  
  ExampleFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${Application}-${Environment}-example'
      CodeUri: './lambdas/example'
      Tags:
        Resource: !Sub 'example-function'
      Events:
        ApiExampleGetResource:
          Type: 'Api'
          Properties:
            Path: '/example'
            Method: 'GET'
            RestApiId: !Ref 'Api'
      Policies:
        - 'AWSLambdaBasicExecutionRole'
        # - Version: '2012-10-17'
        #   Statement:
        #     - Effect: 'Allow'
        #       Action:
        #         - ''
        #       Resource:
        #         - !Sub ''

  ExampleFunctionLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ExampleFunction}'
      RetentionInDays: 14
      
  # Route53
      
  HostedZone:
    Type: 'AWS::Route53::HostedZone'
    DependsOn:
      - 'DeployPolicy'
    Properties:
      Name: !Sub '${DomainName}'
      HostedZoneConfig:
        Comment: !Sub '${Application}-${Environment}'
      HostedZoneTags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-hosted-zone'
  
  RecordSets:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      Comment: !Sub '${Application}-${Environment}-records'
      HostedZoneId: !Sub '${HostedZone}'
      RecordSets:
        - Name: !Sub '${DomainName}.'
          Type: 'A'
          AliasTarget:
            DNSName: !Sub '${WebDistribution.DomainName}'
            HostedZoneId: !Sub '${CloudFrontHostedZone}'
            EvaluateTargetHealth: false
        - Name: !Sub '${DomainName}.'
          Type: 'AAAA'
          AliasTarget:
            DNSName: !Sub '${WebDistribution.DomainName}'
            HostedZoneId: !Sub '${CloudFrontHostedZone}'
            EvaluateTargetHealth: false
  
  # Analytics
  
  WebLogsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Application}-${Environment}-${AWS::AccountId}-${AWS::Region}-web-logs'
      AccessControl: 'LogDeliveryWrite'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-web-logs-bucket'
  
  WebAnalyticsWorkgroup:
    Type: 'AWS::Athena::WorkGroup'
    DependsOn:
      - 'DeployPolicy'
    Properties:
      Name: !Sub '${Application}-${Environment}-web-analytics'
      State: 'ENABLED'
      WorkGroupConfiguration:
        # BytesScannedCutoffPerQuery:
        EnforceWorkGroupConfiguration: true
        PublishCloudWatchMetricsEnabled: true
        RequesterPaysEnabled: false
        ResultConfiguration:
          # EncryptionConfiguration:
          OutputLocation: !Sub 's3://${WebLogsBucket}/query-results/'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-web-analytics-workgroup'

  WebAnalyticsDatabase:
    Type: 'AWS::Glue::Database'
    DependsOn:
      - 'DeployPolicy'
    Properties:
      CatalogId: !Sub '${AWS::AccountId}'
      DatabaseInput:
        Name: !Sub '${Application}_${Environment}_web'
        Description: !Sub 'Web Analytics Tables for ${Application}-${Environment}'
  
  WebAnalyticsCloudFrontTable:
    Type: 'AWS::Glue::Table'
    Properties:
      CatalogId: !Sub '${AWS::AccountId}'
      DatabaseName: !Sub '${WebAnalyticsDatabase}'
      TableInput:
        Name: 'cloudfront_raw'
        Description: !Sub 'Raw CloudFront Requests Table for ${Application}-${Environment}'
        Owner: 'hadoop'
        Retention: 0
        TableType: 'EXTERNAL_TABLE'
        Parameters:
          classification: 'csv'
          compressionType: 'gzip'
          EXTERNAL: 'TRUE'
          typeOfData: 'file'
          'skip.header.line.count': '2'
        StorageDescriptor:
          Location: !Sub 's3://${WebLogsBucket}/web-distribution'
          Compressed: true
          StoredAsSubDirectories: false
          InputFormat: 'org.apache.hadoop.mapred.TextInputFormat'
          OutputFormat: 'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'
          SerdeInfo:
            SerializationLibrary: 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
            Parameters:
              'serialization.format': "\t"
              'field.delim': "\t"
          Columns:
            - Name: 'date'
              Type: 'date'
            - Name: 'time'
              Type: 'string'
            - Name: 'location'
              Type: 'string'
            - Name: 'bytes'
              Type: 'bigint'
            - Name: 'requestip'
              Type: 'string'
            - Name: 'method'
              Type: 'string'
            - Name: 'host'
              Type: 'string'
            - Name: 'uri'
              Type: 'string'
            - Name: 'status'
              Type: 'bigint'
            - Name: 'referrer'
              Type: 'string'
            - Name: 'useragent'
              Type: 'string'
            - Name: 'querystring'
              Type: 'string'
            - Name: 'cookie'
              Type: 'string'
            - Name: 'resulttype'
              Type: 'string'
            - Name: 'requestid'
              Type: 'string'
            - Name: 'hostheader'
              Type: 'string'
            - Name: 'requestprotocol'
              Type: 'string'
            - Name: 'requestbytes'
              Type: 'bigint'
            - Name: 'timetaken'
              Type: 'double'
            - Name: 'xforwardedfor'
              Type: 'string'
            - Name: 'sslprotocol'
              Type: 'string'
            - Name: 'sslcipher'
              Type: 'string'
            - Name: 'responseresulttype'
              Type: 'string'
            - Name: 'httpversion'
              Type: 'string'
            - Name: 'filestatus'
              Type: 'string'
            - Name: 'encryptedfields'
              Type: 'bigint'
            - Name: 'port'
              Type: 'bigint'
            - Name: 'time_to_first_byte'
              Type: 'double'
            - Name: 'detailed_result_type'
              Type: 'string'
            - Name: 'content_length'
              Type: 'bigint'
            - Name: 'range_start'
              Type: 'bigint'
            - Name: 'range_end'
              Type: 'bigint'
  
  # Web Distribution
          
  WebBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Application}-${Environment}-${AWS::AccountId}-${AWS::Region}-web'
      LoggingConfiguration:
        DestinationBucketName: !Sub '${WebLogsBucket}'
        LogFilePrefix: 'web-bucket/'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-web-bucket'
  
  WebBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Sub '${WebBucket}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              CanonicalUser: !Sub '${WebDistributionIdentity.S3CanonicalUserId}'
            Action:
              's3:GetObject'
            Resource:
              - !Sub '${WebBucket.Arn}/*'
  
  WebDistributionIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    DependsOn:
      - 'DeployPolicy'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub '${Application}-${Environment}-id'
  
  WebDistributionCertificate:
    Type: 'AWS::CertificateManager::Certificate'
    DependsOn:
      - 'DeployPolicy'
    Properties:
      DomainName: !Sub '${DomainName}'
      ValidationMethod: 'DNS'
      DomainValidationOptions:
        - DomainName: !Sub '${DomainName}'
          HostedZoneId: !Sub '${HostedZone}'
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-certificate'
  
  WebDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      Tags:
        - Key: 'Application'
          Value: !Sub '${Application}'
        - Key: 'Environment'
          Value: !Sub '${Environment}'
        - Key: 'Resource'
          Value: !Sub '${Application}-${Environment}-web-distribution'
      DistributionConfig:
        Comment: !Sub '${Application}-${Environment}-web'
        Enabled: true
        Aliases:
          - !Sub '${DomainName}'
        # CustomErrorResponses
        DefaultRootObject: 'index.html'
        HttpVersion: 'http2'
        IPV6Enabled: true
        PriceClass: 'PriceClass_100'
        Logging:
          Bucket: !Sub '${WebLogsBucket.DomainName}'
          Prefix: 'web-distribution/'
        Origins:
          - Id: 'WebBucket'
            DomainName: !Sub '${WebBucket.RegionalDomainName}'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${WebDistributionIdentity}'
          - Id: 'Api'
            DomainName: !Sub '${ApiDomain.RegionalDomainName}'
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
              OriginSSLProtocols:
                - 'TLSv1.2'
        CacheBehaviors:
          - TargetOriginId: 'Api'
            AllowedMethods:
              - 'DELETE'
              - 'GET'
              - 'HEAD'
              - 'OPTIONS'
              - 'PATCH'
              - 'POST'
              - 'PUT'
            CachedMethods:
              - 'GET'
              - 'HEAD'
              - 'OPTIONS'
            Compress: true
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            PathPattern: 'api/*'
            ViewerProtocolPolicy: 'redirect-to-https'
            ForwardedValues:
              QueryString: true
              Headers:
                - '*'
        DefaultCacheBehavior:
          TargetOriginId: 'WebBucket'
          Compress: true
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
          ViewerProtocolPolicy: 'redirect-to-https'
          ForwardedValues:
            QueryString: false
        ViewerCertificate:
          AcmCertificateArn: !Sub '${WebDistributionCertificate}'
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'
